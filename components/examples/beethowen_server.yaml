substitutions:
  systemName: "beethowen-server2"

esphome:
  name: $systemName

external_components:
  - source: github://afarago/esphome_component_bthome
    refresh: 1min

esp8266:
  board: d1_mini

api:

web_server:
  port: 80
  ota: false

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap: ## this is needed as ESP-NOW demands AP
    ssid: "$systemName"
    password: !secret wifi_password

logger:
  level: debug

time:
  - platform: homeassistant
    id: my_time
    timezone: Europe/Berlin

beethowen_receiver:
  # dump: all
  local_passkey: 0x1234
  on_event: # on_event(address, event)
    - lambda: |-
        // ESP_LOGI("app", "event received {id} 0x%x {event_type} %d ({steps} %d)",
        //  event.id, event.event_type, event.steps);
        if (event.id == bthome_base::BTHOME_BUTTON_EVENT) {
          if (event.id == bthome_base::BTHOME_BUTTON_CLICK) {
            ESP_LOGI("app", "button_click event");
          }
        }
  # adding named events to device will be the next step
  # on_button_click: 
  on_packet: # on_packet(address, measurements)
    - lambda: |-
        ESP_LOGI("app", "packet {count} %d", measurements.size());
    # - light.turn_on:
    #     id: my_led
    #     flash_length: 50ms
  devices:
    - mac_address: 48:3F:DA:0C:97:18
      name_prefix: Beethowen TestDevice
      dump: all
    - mac_address: AA:BB:CC:DD:EE:FF
      name_prefix: Beethowen ABCDEF TestDevice
      dump: unmatched
      expected_remote_passkey: 0x2345
      # adding events to device will be the next step
      # on_event: # on_event(address, event)
      #   - lambda: |-
      #       // ESP_LOGI("app", "event received {id} 0x%x {event_type} %d ({steps} %d)",
      #       //  event.id, event.event_type, event.steps);

binary_sensor:
  - platform: beethowen_receiver
    mac_address: 48:3F:DA:0C:97:18
    sensors:
      - measurement_type: generic_boolean
        name: D6_gpio

sensor:
  - platform: beethowen_receiver
    mac_address: 48:3F:DA:0C:97:18
    sensors:
      - measurement_type: temperature
        name: Temperature
        on_value:
          - lambda: |-
              auto time_isvalid = id(my_time).now().is_valid();
              if (time_isvalid) {
                auto time_text = id(my_time).now().strftime("%Y-%m-%d %H:%M:%S");
                long long int time_ts = id(my_time).now().timestamp;
                id(lastupdate).publish_state(time_text);
              }
      - measurement_type: pressure
        name: Pressure

      - measurement_type: count_4
        name: Count
        unit_of_measurement: cycles
      - measurement_type: duration
        name: Cycle time
      - measurement_type: voltage
        name: Battery voltage
      - measurement_type: battery
        name: Battery level

  - platform: beethowen_receiver
    mac_address: AA:BB:CC:DD:EE:00
    sensors:
      - measurement_type: temperature
        name: Temperature

text_sensor:
  - platform: template
    id: lastupdate
    name: ${systemName}.Last Update
